/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
    private:
    void insert(Node* &ch,Node* &ct,int d)
    {
        Node *newnode=new Node(d);
        if(ch==NULL)
        {
            ch=newnode;
            ct=newnode;
            return;
        }
        else{
            ct->next=newnode;
            ct=newnode;
        }
    }
public:
    Node* copyRandomList(Node* head) {
        //create a single linkedlist(clone)
        Node* cloneHead=NULL,*cloneTail=NULL;
        Node *temp=head;
        while(temp!=NULL)
        {
            insert(cloneHead,cloneTail,temp->val);
            temp=temp->next;
        }
       temp=head;
        Node* clonenode=cloneHead;
        while(temp!=NULL)
        {
            Node *p=temp->next;
            temp->next=clonenode;
            temp=p;
            p=clonenode->next;
            clonenode->next=temp;
            clonenode=p;
         }
        temp=head;
        while(temp!=NULL)
        {
            if(temp->next!=NULL)
            {
                if(temp->random!=NULL)
                {
                    temp->next->random=temp->random->next;
                }
            }
            else temp->next=temp->random;
            
            temp=temp->next->next;
        }
        temp=head;
        clonenode=cloneHead;
         while(temp!=NULL){
             temp->next=clonenode->next;
             temp=temp->next;
             if(temp!=NULL)
             clonenode->next=temp->next;
             
             clonenode=clonenode->next;
         }
        return cloneHead;
    }
};
