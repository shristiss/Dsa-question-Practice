/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *helper(vector<int>in,vector<int>post,int &index,int instart,int inend,unordered_map<int,int>&mp)
    {
        if(index<0 || instart>inend) return NULL;
        int element=post[index--];
        TreeNode *root=new TreeNode(element);
        int pos=mp[element];
        if(instart==inend) return root;
         root->right=helper(in,post,index,pos+1,inend,mp);
        root->left=helper(in,post,index,instart,pos-1,mp);
       
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int postindex=postorder.size()-1;
        unordered_map<int,int>mp;
        int instart=0,inend=inorder.size()-1;
        for(int i=0;i<postorder.size();i++)
        {
            mp[inorder[i]]=i;
        }
       return helper(inorder,postorder,postindex,instart,inend,mp);
    }
};
