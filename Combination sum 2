class Solution {
    void helper(vector<int>& candidates,int target,vector<vector<int>>&ans,vector<int>ds,int index)
    {
        if(target == 0){
            ans.push_back(ds);
            return;
        }
      for(int i = index; i< candidates.size(); i++){
            if(candidates[i] > target) break; // no point of it to add it to the ans if the  candidate at ith element exceeds the target no picking up hence break 
            if(i  > index && candidates[i] == candidates[i-1])
                continue;
                //to avoid picking up the same elements and thus avoiding duplicates (no picking of element)
            ds.push_back(candidates[i]);
            helper(candidates, target- candidates[i], ans, ds,i+1); //call for next  index element
            ds.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>ds;
        int index=0,sum=0;
        sort(candidates.begin(),candidates.end());
        helper(candidates,target,ans,ds,index);
        return ans;
    }
};
