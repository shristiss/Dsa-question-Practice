class Solution{
     int dp[10000 + 1][12 + 1];
    int helper(vector<int>&coins,int amount,int n)
    {
        if(n==0 || amount==0)return amount==0?0:INT_MAX-1;
        if(dp[amount][n]!=-1)return dp[amount][n];
        if(coins[n-1]>amount)return dp[amount][n]= 0+helper(coins,amount,n-1);
        else 
            return dp[amount][n]=min(0+helper(coins,amount,n-1),1+helper(coins,amount-coins[n-1],n));
    }
    public:
     int coinChange(vector<int>&coins,int amount)
     {
         memset(dp,-1,sizeof(dp));
         int n=coins.size();
        int ans= helper(coins,amount,n);
         return ans==INT_MAX-1?-1:ans;
     }
};
BRUTEFORCE
class Solution {
    void helper(vector<int>coins,vector<int>ds,int amount,int &ans,long sum)
    {
       if(sum==amount)
        {
            int size=ds.size();
            ans=min(ans,size);
            return;
        }
        if(sum>amount)return;
        for(int i=0;i<coins.size();i++)
        {
            ds.push_back(coins[i]);
            sum+=coins[i];
            helper(coins,ds,amount,ans,sum);
            sum-=coins[i];
            ds.pop_back();
        }
        
    }
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int>ds;
        int index=0;
        int ans=INT_MAX;
        helper(coins,ds,amount,ans,0);
        return ans==INT_MAX?-1:ans;
    }
};
