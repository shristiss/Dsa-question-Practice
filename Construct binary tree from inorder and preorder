/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int findpos(vector<int>in,int element)
    {
        for(int i=0;i<in.size();i++)
        {
            if(in[i]==element)
                return i;
        }
        return -1;
    }
    TreeNode *helper(vector<int>pre,vector<int>in,int &index,int instart,int inend)
    {
        if(index>=pre.size() || instart>inend) return NULL;
            int element=pre[index++];
        TreeNode *root=new TreeNode(element); 
        int position=findpos(in,element);
        root->left=helper(pre,in,index,instart,position-1);
        root->right=helper(pre,in,index,position+1,inend);
        return root;
        
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preindex=0;
        TreeNode *ans=helper(preorder,inorder,preindex,0,inorder.size()-1);
        return ans;
    }
};
