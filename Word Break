class Solution {
    bool helper(string s,unordered_set<string>st,int pos,vector<int>dp)
    {
        if(pos==s.length())return true;
        if(dp[pos]!=-1)return dp[pos];
        for(int i=pos;i<=s.length();i++)
        {
            string temp=s.substr(pos,i-pos+1);
            if(st.find(temp)!=st.end() &&(i+1==s.length() || helper(s,st,i+1,dp) ) )
            {
               // cout<<temp<<" ";
                return dp[pos]=true;
            }
        }
        return dp[pos]=false;
    }
    bool tabu(string s,unordered_set<string>st)
    {
        vector<bool>dp(s.size()+1,false);
        dp[0]=true;
        for(int i=1;i<=s.length();i++)
        {
            for(int j=i-1;j>=0;j--)
            {
               if(dp[j])
               {
                    string temp=s.substr(j,i-j);
                if(st.find(temp)!=st.end())
                {
                    dp[i]=true;
                    break;
                }
               }
            }
        }
        return dp[s.size()];
    }
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<int>dp(s.length()+1,-1);
        unordered_set<string>st;
        for(auto it:wordDict)st.insert(it);
        return tabu(s,st);
    }
};
