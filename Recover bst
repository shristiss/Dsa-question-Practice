/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void inorder(TreeNode *root,vector<int>&v)
    {
        if(root)
        {
            inorder(root->left,v);
            v.push_back(root->val);
            inorder(root->right,v);
        }
    }
    void helper(vector<int>v,TreeNode *root,int &count)
    {
        if(root==NULL) return;
        helper(v,root->left,count);
        root->val=v[count++];
        helper(v,root->right,count);
    }
public:
    void recoverTree(TreeNode* root) {
        int count=0;
        vector<int>v;
        inorder(root,v);
        sort(v.begin(),v.end());
        helper(v,root,count);
        
    }
    
};
//Second approach(better)
class Solution {
    
    void helper(TreeNode *root,TreeNode*& first,TreeNode*& end,TreeNode*& prev)
    {
      if(root==NULL)return;
        helper(root->left,first,end,prev);
        if(prev)
        {
            if(prev->val>root->val)
            {
             if(first==NULL)
                {
                  first=prev;
                 }
                end=root;
            }
           
        }
        prev=root;
        helper(root->right,first,end,prev);
    }
public:
    void recoverTree(TreeNode* root) {
       TreeNode *first=NULL,*end=NULL,*prev=NULL;
        helper(root,first,end,prev);
        swap(first->val,end->val);
    }
};
