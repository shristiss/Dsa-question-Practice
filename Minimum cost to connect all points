class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n=points.size();
         priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>heap;
           vector<bool>visited(n);
        heap.push({0,0});
        int ans=0;
        int edge=0;
        while(edge<n)
        {
            pair<int,int>xx=heap.top();
            heap.pop();
            int weight=xx.first;
            int curr=xx.second;
            if(visited[curr])continue;
            visited[curr]=true;
            ans+=weight;
            edge++;
            for(int i=0;i<n;i++)
            {
                if(!visited[i])
                {
                    int ff=abs(points[curr][0]-points[i][0])+abs(points[curr][1]-points[i][1]);
                    heap.push({ff,i});
                }
            }
        }
        return ans;
    }
};
