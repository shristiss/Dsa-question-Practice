class Solution {
    void dfs(vector<bool>&vis, vector<int>adjList[],int node)
    {
        vis[node]=1;
        for(auto it:adjList[node])
        {
            if(!vis[it])
                dfs(vis,adjList,it);
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        vector<int>adjList[n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(isConnected[i][j]==1 && i!=j)
                {
                     adjList[i].push_back(j);
                    adjList[j].push_back(i);
                }
               
            }
        }
       vector<bool>vis(n,false);
        int count=0;
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                count++;
                dfs(vis,adjList,i);
            }
        }
       return count; 
    }
};
