/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int i=0;
    TreeNode* helper(string s,int n)
    {
        if(i>=s.length())return NULL;
        int x=0;
        int st=i;
        while(i<s.size() && s[i]=='-')
        {
            i++;
            x++;
        }
        if(x!=n)
        {
            i=st;
            return NULL;
        }
        string str;
        while(s[i]!='-' && i<s.size())
        {
            str+=s[i];
            i++;
        }
        int val=stoi(str);
        TreeNode *newnode=new TreeNode(val);
        newnode->left=helper(s,n+1);
        newnode->right=helper(s,n+1);
        return newnode;
    }
public:
    TreeNode* recoverFromPreorder(string traversal) {
       return helper(traversal,0);
    }
};
