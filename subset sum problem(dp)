 class Solution{   
   
public:
 int dp[102][10002];
    int helper(vector<int>arr,int sum,int n)
    {
         if(sum==0)return 1;
        if(n==0)return 0;
       
        if(dp[n][sum]!=-1)return dp[n][sum];
        if(arr[n-1]<=sum)
           dp[n][sum]=helper(arr,sum-arr[n-1],n-1)||helper(arr,sum,n-1);
        else dp[n][sum]=helper(arr,sum,n-1);
        return dp[n][sum];
    }
    bool isSubsetSum(vector<int>arr, int sum){
        // code here
        memset(dp,-1,sizeof(dp));
        int index=0,n=arr.size();
       return helper(arr,sum,n);
      
    }
};
DP
class Solution{   
public:
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        if(sum==0)return 1;
        int n=arr.size();
        int dp[n+1][sum+1];
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=1;
        }
        for(int i=1;i<=sum;i++)
        {
            dp[0][i]=0;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sum;j++)
            {
                dp[i][j]=dp[i-1][j];
                if(arr[i-1]<=j)
                {
                    if(dp[i-1][j-arr[i-1]]==1)
                      dp[i][j]=1;
                }
            }
        }
        return dp[n][sum];
    }
};
